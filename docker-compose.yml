version: '3.8'

networks:
  app_network:

services:
  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
    volumes:
      - "./nginx.conf:/etc/nginx/nginx.conf"
    depends_on:
      - backend
      - frontend
    networks:
      - app_network

  db:
    image: postgres:16
    restart: always
    hostname: postgres
    env_file:
      - '.env'
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    restart: always
    env_file:
      - '.env'
    networks:
      - app_network
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL}
    command: >
      sh -c "
      npx prisma generate &&
      npx prisma migrate deploy &&
      npm start
      "

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL}
        VITE_API_TOKEN: ${VITE_API_TOKEN}
    restart: always
    env_file:
      - '.env'
    networks:
      - app_network
    depends_on:
      - backend

volumes:
  postgres_data: